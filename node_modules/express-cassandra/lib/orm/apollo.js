'use strict';

var async = require('async');
var util = require('util');
var _ = require('lodash');
var cql = require('dse-driver');

var BaseModel = require('./base_model');
var schemer = require('./apollo_schemer');
var buildError = require('./apollo_error.js');

var DEFAULT_REPLICATION_FACTOR = 1;

var noop = function noop() {};

var Apollo = function f(connection, options) {
  if (!connection) {
    throw buildError('model.validator.invalidconfig', 'Cassandra connection configuration undefined');
  }

  options = options || {};

  if (!options.defaultReplicationStrategy) {
    options.defaultReplicationStrategy = {
      class: 'SimpleStrategy',
      replication_factor: DEFAULT_REPLICATION_FACTOR
    };
  }

  this._options = options;
  this._models = {};
  this._keyspace = connection.keyspace;
  this._connection = connection;
  this._client = null;
};

Apollo.prototype = {
  _generate_model: function _generate_model(properties, callback) {
    var Model = function f() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      BaseModel.apply(this, Array.prototype.slice.call(args));
    };

    util.inherits(Model, BaseModel);

    Object.keys(BaseModel).forEach(function (key) {
      Model[key] = BaseModel[key];
    });

    Model._set_properties(properties);
    Model.syncDefinition(function (err, result) {
      if (typeof callback === 'function') {
        if (err) callback(err);else callback(null, result);
      }
    });

    return Model;
  },
  _get_system_client: function _get_system_client() {
    var connection = _.cloneDeep(this._connection);
    delete connection.keyspace;

    return new cql.Client(connection);
  },
  _generate_replication_text: function _generate_replication_text(replicationOption) {
    if (typeof replicationOption === 'string') {
      return replicationOption;
    }

    var properties = [];
    Object.keys(replicationOption).forEach(function (k) {
      properties.push(util.format("'%s': '%s'", k, replicationOption[k]));
    });

    return util.format('{%s}', properties.join(','));
  },
  _assert_keyspace: function _assert_keyspace(callback) {
    var self = this;
    var client = this._get_system_client();
    var keyspaceName = this._connection.keyspace;
    var replicationText = '';
    var options = this._options;

    var query = util.format("SELECT * FROM system_schema.keyspaces WHERE keyspace_name = '%s';", keyspaceName);
    client.execute(query, function (err, result) {
      if (err) {
        callback(err);
        return;
      }

      var createKeyspace = function createKeyspace() {
        replicationText = self._generate_replication_text(options.defaultReplicationStrategy);

        query = util.format('CREATE KEYSPACE IF NOT EXISTS "%s" WITH REPLICATION = %s;', keyspaceName, replicationText);
        client.execute(query, function (err1, result1) {
          client.shutdown(function () {
            callback(err1, result1);
          });
        });
      };

      var alterKeyspace = function alterKeyspace() {
        replicationText = self._generate_replication_text(options.defaultReplicationStrategy);

        query = util.format('ALTER KEYSPACE "%s" WITH REPLICATION = %s;', keyspaceName, replicationText);
        client.execute(query, function (err1, result1) {
          client.shutdown(function () {
            // eslint-disable-next-line no-console
            console.warn('WARN: KEYSPACE ALTERED! Run the `nodetool repair` command on each affected node.');
            callback(err1, result1);
          });
        });
      };

      if (result.rows && result.rows.length > 0) {
        var dbReplication = result.rows[0].replication;

        Object.keys(dbReplication).forEach(function (key) {
          if (key === 'class') dbReplication[key] = dbReplication[key].replace('org.apache.cassandra.locator.', '');else dbReplication[key] = parseInt(dbReplication[key], 10);
        });

        var ormReplication = options.defaultReplicationStrategy;
        Object.keys(ormReplication).forEach(function (key) {
          if (key === 'class') ormReplication[key] = ormReplication[key].replace('org.apache.cassandra.locator.', '');else ormReplication[key] = parseInt(ormReplication[key], 10);
        });

        if (_.isEqual(dbReplication, ormReplication)) {
          client.shutdown(function () {
            callback();
          });
        } else {
          alterKeyspace();
        }
      } else {
        createKeyspace();
      }
    });
  },
  _assert_user_defined_types: function _assert_user_defined_types(callback) {
    var client = this._define_connection;
    var options = this._options;
    var keyspace = this._keyspace;

    if (options.udts) {
      async.eachSeries(Object.keys(options.udts), function (udtKey, udtCallback) {
        var query = util.format("SELECT * FROM system_schema.types WHERE keyspace_name = '%s' AND type_name = '%s';", keyspace, udtKey);
        client.execute(query, function (err, result) {
          if (err) {
            udtCallback(err);
            return;
          }

          var createUDT = function createUDT() {
            var udtFields = [];
            Object.keys(options.udts[udtKey]).forEach(function (field) {
              udtFields.push(util.format('"%s" %s', field, options.udts[udtKey][field]));
            });
            query = util.format('CREATE TYPE IF NOT EXISTS "%s" (%s);', udtKey, udtFields.toString());
            client.execute(query, function (err1) {
              udtCallback(err1);
            });
          };

          if (result.rows && result.rows.length > 0) {
            var udtKeys = Object.keys(options.udts[udtKey]);
            var udtValues = _.values(options.udts[udtKey]);
            for (var i = 0; i < udtValues.length; i++) {
              udtValues[i] = udtValues[i].replace(/[\s]/g, '');
              if (udtValues[i].indexOf('<') > -1 && udtValues[i].indexOf('frozen<') !== 0) {
                udtValues[i] = util.format('frozen<%s>', udtValues[i]);
              }
            }

            var fieldNames = result.rows[0].field_names;
            var fieldTypes = result.rows[0].field_types;
            for (var _i = 0; _i < fieldTypes.length; _i++) {
              fieldTypes[_i] = fieldTypes[_i].replace(/[\s]/g, '');
              if (fieldTypes[_i].indexOf('<') > -1 && fieldTypes[_i].indexOf('frozen<') !== 0) {
                fieldTypes[_i] = util.format('frozen<%s>', fieldTypes[_i]);
              }
            }

            if (_.isEqual(udtKeys, fieldNames) && _.isEqual(udtValues, fieldTypes)) {
              udtCallback();
            } else {
              throw new Error(util.format('User defined type "%s" already exists but does not match the udt definition. ' + 'Consider altering or droping the type.', udtKey));
            }
          } else {
            createUDT();
          }
        });
      }, function (err) {
        callback(err);
      });
    } else {
      callback();
    }
  },
  _assert_user_defined_functions: function _assert_user_defined_functions(callback) {
    var client = this._define_connection;
    var options = this._options;
    var keyspace = this._keyspace;

    if (options.udfs) {
      async.eachSeries(Object.keys(options.udfs), function (udfKey, udfCallback) {
        if (!options.udfs[udfKey].returnType) {
          throw new Error(util.format('No returnType defined for user defined function: %s', udfKey));
        }
        if (!options.udfs[udfKey].language) {
          throw new Error(util.format('No language defined for user defined function: %s', udfKey));
        }
        if (!options.udfs[udfKey].code) {
          throw new Error(util.format('No code defined for user defined function: %s', udfKey));
        }
        if (options.udfs[udfKey].inputs && !_.isPlainObject(options.udfs[udfKey].inputs)) {
          throw new Error(util.format('inputs must be an object for user defined function: %s', udfKey));
        }
        if (options.udfs[udfKey].inputs instanceof Array) {
          throw new Error(util.format('inputs must be an object, not an array for user defined function: %s', udfKey));
        }

        var query = util.format("SELECT * FROM system_schema.functions WHERE keyspace_name = '%s' AND function_name = '%s';", keyspace, udfKey.toLowerCase());
        client.execute(query, function (err, result) {
          if (err) {
            udfCallback(err);
            return;
          }

          var createUDF = function createUDF() {
            var udfInputs = [];
            if (options.udfs[udfKey].inputs) {
              Object.keys(options.udfs[udfKey].inputs).forEach(function (input) {
                udfInputs.push(util.format('%s %s', input, options.udfs[udfKey].inputs[input]));
              });
            }
            query = util.format("CREATE OR REPLACE FUNCTION %s (%s) CALLED ON NULL INPUT RETURNS %s LANGUAGE %s AS '%s';", udfKey, udfInputs.toString(), options.udfs[udfKey].returnType, options.udfs[udfKey].language, options.udfs[udfKey].code);
            client.execute(query, function (err1) {
              udfCallback(err1);
            });
          };

          if (result.rows && result.rows.length > 0) {
            var udfLanguage = options.udfs[udfKey].language;
            var resultLanguage = result.rows[0].language;

            var udfCode = options.udfs[udfKey].code;
            var resultCode = result.rows[0].body;

            var udfReturnType = options.udfs[udfKey].returnType;
            udfReturnType = udfReturnType.replace(/[\s]/g, '');
            if (udfReturnType.indexOf('<') > -1 && udfReturnType.indexOf('frozen<') !== 0) {
              udfReturnType = util.format('frozen<%s>', udfReturnType);
            }
            var resultReturnType = result.rows[0].return_type;
            resultReturnType = resultReturnType.replace(/[\s]/g, '');
            if (resultReturnType.indexOf('<') > -1 && resultReturnType.indexOf('frozen<') !== 0) {
              resultReturnType = util.format('frozen<%s>', resultReturnType);
            }

            var udfInputs = options.udfs[udfKey].inputs ? options.udfs[udfKey].inputs : {};
            var udfInputKeys = Object.keys(udfInputs);
            var udfInputValues = _.values(udfInputs);
            for (var i = 0; i < udfInputValues.length; i++) {
              udfInputValues[i] = udfInputValues[i].replace(/[\s]/g, '');
              if (udfInputValues[i].indexOf('<') > -1 && udfInputValues[i].indexOf('frozen<') !== 0) {
                udfInputValues[i] = util.format('frozen<%s>', udfInputValues[i]);
              }
            }
            var resultArgumentNames = result.rows[0].argument_names;
            var resultArgumentTypes = result.rows[0].argument_types;
            for (var _i2 = 0; _i2 < resultArgumentTypes.length; _i2++) {
              resultArgumentTypes[_i2] = resultArgumentTypes[_i2].replace(/[\s]/g, '');
              if (resultArgumentTypes[_i2].indexOf('<') > -1 && resultArgumentTypes[_i2].indexOf('frozen<') !== 0) {
                resultArgumentTypes[_i2] = util.format('frozen<%s>', resultArgumentTypes[_i2]);
              }
            }

            if (udfLanguage === resultLanguage && udfCode === resultCode && udfReturnType === resultReturnType && _.isEqual(udfInputKeys, resultArgumentNames) && _.isEqual(udfInputValues, resultArgumentTypes)) {
              udfCallback();
            } else {
              createUDF();
            }
          } else {
            createUDF();
          }
        });
      }, function (err) {
        callback(err);
      });
    } else {
      callback();
    }
  },
  _assert_user_defined_aggregates: function _assert_user_defined_aggregates(callback) {
    var client = this._define_connection;
    var options = this._options;
    var keyspace = this._keyspace;

    if (options.udas) {
      async.eachSeries(Object.keys(options.udas), function (udaKey, udaCallback) {
        if (!options.udas[udaKey].input_types) {
          throw new Error(util.format('No input_types defined for user defined function: %s', udaKey));
        }
        if (!(options.udas[udaKey].input_types instanceof Array)) {
          throw new Error(util.format('input_types must be an array for user defined function: %s', udaKey));
        }
        if (options.udas[udaKey].input_types.length < 1) {
          throw new Error(util.format('input_types array cannot be blank for user defined function: %s', udaKey));
        }
        if (!options.udas[udaKey].sfunc) {
          throw new Error(util.format('No sfunc defined for user defined aggregate: %s', udaKey));
        }
        if (!options.udas[udaKey].stype) {
          throw new Error(util.format('No stype defined for user defined aggregate: %s', udaKey));
        }
        if (!options.udas[udaKey].initcond) {
          options.udas[udaKey].initcond = null;
        }

        var query = util.format("SELECT * FROM system_schema.aggregates WHERE keyspace_name = '%s' AND aggregate_name = '%s';", keyspace, udaKey.toLowerCase());
        client.execute(query, function (err, result) {
          if (err) {
            udaCallback(err);
            return;
          }

          var createUDA = function createUDA() {
            query = util.format('CREATE OR REPLACE AGGREGATE %s (%s) SFUNC %s STYPE %s', udaKey, options.udas[udaKey].input_types.toString(), options.udas[udaKey].sfunc, options.udas[udaKey].stype);
            if (options.udas[udaKey].finalfunc) query += util.format(' FINALFUNC %s', options.udas[udaKey].finalfunc);
            query += util.format(' INITCOND %s;', options.udas[udaKey].initcond);

            client.execute(query, function (err1) {
              udaCallback(err1);
            });
          };

          if (result.rows && result.rows.length > 0) {
            var inputTypes = options.udas[udaKey].input_types;
            for (var i = 0; i < inputTypes.length; i++) {
              inputTypes[i] = inputTypes[i].replace(/[\s]/g, '');
              if (inputTypes[i].indexOf('<') > -1 && inputTypes[i].indexOf('frozen<') !== 0) {
                inputTypes[i] = util.format('frozen<%s>', inputTypes[i]);
              }
            }
            var sfunc = options.udas[udaKey].sfunc.toLowerCase();
            var stype = options.udas[udaKey].stype;
            stype = stype.replace(/[\s]/g, '');
            if (stype.indexOf('<') > -1 && stype.indexOf('frozen<') !== 0) {
              stype = util.format('frozen<%s>', stype);
            }
            var finalfunc = options.udas[udaKey].finalfunc;
            if (finalfunc) finalfunc = finalfunc.toLowerCase();else finalfunc = null;
            var initcond = options.udas[udaKey].initcond;
            if (initcond) initcond = initcond.replace(/[\s]/g, '');

            for (var _i3 = 0; _i3 < result.rows.length; _i3++) {
              var resultArgumentTypes = result.rows[_i3].argument_types;
              for (var j = 0; j < resultArgumentTypes.length; j++) {
                resultArgumentTypes[j] = resultArgumentTypes[j].replace(/[\s]/g, '');
                if (resultArgumentTypes[j].indexOf('<') > -1 && resultArgumentTypes[j].indexOf('frozen<') !== 0) {
                  resultArgumentTypes[j] = util.format('frozen<%s>', resultArgumentTypes[j]);
                }
              }

              var resultStateFunc = result.rows[_i3].state_func;
              var resultStateType = result.rows[_i3].state_type;
              resultStateType = resultStateType.replace(/[\s]/g, '');
              if (resultStateType.indexOf('<') > -1 && resultStateType.indexOf('frozen<') !== 0) {
                resultStateType = util.format('frozen<%s>', resultStateType);
              }

              var resultFinalFunc = result.rows[_i3].final_func;

              var resultInitcond = result.rows[_i3].initcond;
              if (resultInitcond) resultInitcond = resultInitcond.replace(/[\s]/g, '');

              if (sfunc === resultStateFunc && stype === resultStateType && finalfunc === resultFinalFunc && initcond === resultInitcond && _.isEqual(inputTypes, resultArgumentTypes)) {
                udaCallback();
                return;
              }
            }

            createUDA();
          } else {
            createUDA();
          }
        });
      }, function (err) {
        callback(err);
      });
    } else {
      callback();
    }
  },
  _set_client: function _set_client(client) {
    var _this = this;

    var defineConnectionOptions = _.cloneDeep(this._connection);

    this._client = client;
    this._define_connection = new cql.Client(defineConnectionOptions);

    // Reset connections on all models
    Object.keys(this._models).forEach(function (i) {
      _this._models[i]._properties.cql = _this._client;
      _this._models[i]._properties.define_connection = _this._define_connection;
    });
  },
  connect: function connect(callback) {
    var _this2 = this;

    var onUserDefinedAggregates = function onUserDefinedAggregates(err) {
      if (err) {
        callback(err);
        return;
      }
      callback(err, _this2);
    };

    var onUserDefinedFunctions = function f(err) {
      if (err) {
        callback(err);
        return;
      }
      try {
        this._assert_user_defined_aggregates(onUserDefinedAggregates.bind(this));
      } catch (e) {
        throw buildError('model.validator.invaliduda', e.message);
      }
    };

    var onUserDefinedTypes = function f(err) {
      if (err) {
        callback(err);
        return;
      }
      try {
        this._assert_user_defined_functions(onUserDefinedFunctions.bind(this));
      } catch (e) {
        throw buildError('model.validator.invalidudf', e.message);
      }
    };

    var onKeyspace = function f(err) {
      if (err) {
        callback(err);
        return;
      }
      this._set_client(new cql.Client(this._connection));
      try {
        this._assert_user_defined_types(onUserDefinedTypes.bind(this));
      } catch (e) {
        throw buildError('model.validator.invalidudt', e.message);
      }
    };

    if (this._keyspace && this._options.createKeyspace) {
      this._assert_keyspace(onKeyspace.bind(this));
    } else {
      onKeyspace.call(this);
    }
  },
  add_model: function add_model(modelName, modelSchema, callback) {
    if (!modelName || typeof modelName !== 'string') {
      throw buildError('model.validator.invalidschema', 'Model name must be a valid string');
    }

    try {
      schemer.validate_model_schema(modelSchema);
    } catch (e) {
      throw buildError('model.validator.invalidschema', e.message);
    }

    var baseProperties = {
      name: modelName,
      schema: modelSchema,
      keyspace: this._keyspace,
      define_connection: this._define_connection,
      cql: this._client,
      get_constructor: this.get_model.bind(this, modelName),
      connect: this.connect.bind(this),
      dropTableOnSchemaChange: this._options.dropTableOnSchemaChange,
      migration: this._options.migration,
      disableTTYConfirmation: this._options.disableTTYConfirmation
    };

    this._models[modelName] = this._generate_model(baseProperties, callback);
    return this._models[modelName];
  },
  get_model: function get_model(modelName) {
    return this._models[modelName] || null;
  },
  close: function close(callback) {
    callback = callback || noop;

    var clientsToShutdown = [];
    if (this.orm._client) {
      clientsToShutdown.push(this.orm._client.shutdown());
    }
    if (this.orm._define_connection) {
      clientsToShutdown.push(this.orm._define_connection.shutdown());
    }

    Promise.all(clientsToShutdown).then(function () {
      callback();
    }).catch(function (err) {
      callback(err);
    });
  }
};

module.exports = Apollo;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,